3.2.7 (Media Mark)
2f9847fba9033a9ee1074ccdd97721ed020a1459
o:Sass::Tree::RootNode
:@template"è*@import "compass/layout/grid-background";
@import "compass/typography/units";

// The default font size for all text in pixels
$base-font-size: 16px !default;

// The distance between text baselines (vertical rhythm) in pixels.
$base-line-height: 24px !default;

// The length unit in which to output rhythm values.
// Supported values: px, em, rem. Percent units can't be used since they
// make calculating padding and margins impractical, and percentage borders are
// not valid or supported in css.
$rhythm-unit: 'em' !default;

// Whether to output fallback values in px when using rem as the rhythm-unit.
$rem-with-px-fallback: true !default;

// Default values for rhythm borders properties.
// Supports style alone eg. `solid` or list of style and color eg. `solid #aaa`;
$default-rhythm-border-width: 1px !default;
$default-rhythm-border-style: solid !default;

// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function
// to round the line height to the nearest half line height instead of the
// nearest integral line height to avoid large spacing between lines.
$round-to-nearest-half-line: false !default;

// Ensure there is at least this many pixels
// of vertical padding above and below the text.
$min-line-padding: 2px !default;

// The leader is the amount of whitespace in a line.
// It might be useful in your calculations.
$base-leader: convert-length($base-line-height - $base-font-size, $rhythm-unit, $base-font-size);

// The half-leader is the amount of whitespace above and below a line.
// It might be useful in your calculations.
$base-half-leader: $base-leader / 2;

// @private Whether the rhythm output is in absolute units (px) or not (em, rem)
$relative-font-sizing: if($rhythm-unit == px, false, true);

// Validate units
@if unit($base-font-size)   != 'px' { @warn "$base-font-size must resolve to a pixel unit."; }
@if unit($base-line-height) != 'px' { @warn "$base-line-height must resolve to a pixel unit."; }
@if $rhythm-unit != 'px' and $rhythm-unit != 'em' and $rhythm-unit != 'rem' {
  @warn "$rhythm-unit must be `px`, `em` or `rem`.";
}


// Calculate rhythm units.
@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {
  $rhythm: convert-length($lines * $base-line-height - $offset, $rhythm-unit, $font-size);
  @if unit($rhythm) == px {
    $rhythm: floor($rhythm);
  }
  @return $rhythm;
}

// Calculate the minimum multiple of rhythm units needed to contain the font-size.
@function lines-for-font-size($font-size) {
  $lines: if($round-to-nearest-half-line,
             ceil(2 * $font-size / $base-line-height) / 2,
             ceil($font-size / $base-line-height));
  // If lines are cramped include some extra lead.
  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {
    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
  }
  @return $lines;
}


// @private Outputs rhythm values. For rem units, outputs pixel fallbacks
// by default.
@mixin output-rhythm($property, $values) {
  @if $rhythm-unit == rem and $rem-with-px-fallback {
    @include rem($property, $values);
  }
  @else {
    $output: ();
    @each $value in $values {
      @if unit($value) == px {
        // Ensure all pixel values are rounded to the nearest pixel.
        $output: join($output, round($value));
      }
      @else {
        $output: join($output, $value);
      }
    }
    #{$property}: $output;
  }
}

// Establishes a font baseline for the given font-size.
@mixin establish-baseline($font-size: $base-font-size) {
  $relative-size: 100% * ($font-size / $browser-default-font-size);

  @if $legacy-support-for-ie6 and (not $relative-font-sizing) {
    // IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts
    // whose root is set in ems. So we set the root font size in percentages of
    // the default font size, even if we are using absolute sizes elsewhere.
    * html { font-size: $relative-size; }
  }
  html {
    font-size: if($relative-font-sizing, $relative-size, $font-size);

    // Webkit has a bug that prevents line-height being set in rem on <html>;
    // To work around this and simplify output, we can set initial line-height
    // in ems for all relative rhythm units, even when $rhythm-unit is `rem`.
    @if $relative-font-sizing {
      line-height: convert-length($base-line-height, em);
    }
    @else {
      line-height: round($base-line-height);
    }
  }
}

// Resets the baseline to 1 rhythm unit
// Does not work on elements whose font-size is different from $base-font-size.
//
// @deprecated This mixin will be removed in the next release.
// Please use `adjust-leading-to(1)` instead.
@mixin reset-baseline($font-size: $base-font-size) {
  @include adjust-leading-to(1, $font-size);
}

// Show a background image that can be used to debug your alignments.
// As this is a development feature, this mixin never outputs pixel fallbacks
// for rem output.
// Include the $img argument if you would rather use your own image than the
// Compass default gradient image.
@mixin debug-vertical-alignment($img: false) {
  @if $img {
    background: image-url($img);
  }
  @else {
    @include baseline-grid-background(rhythm());
  }
}

// Adjust a block to have a different font size and line height to maintain the
// rhythm. $lines specifies how many multiples of the baseline rhythm each line
// of this font should use up. It does not have to be an integer, but it
// defaults to the smallest integer that is large enough to fit the font.
// Use $from-size to adjust from a font-size other than the base font-size.
@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $base-font-size) {
  $to-size: convert-length($to-size, px, $from-size);
  @if $lines == auto {
    $lines: lines-for-font-size($to-size);
  }
  @include output-rhythm(font-size, convert-length($to-size, $rhythm-unit, $from-size));
  @include adjust-leading-to($lines, $to-size);
}

// Adjust a block to have different line height to maintain the rhythm.
// $lines specifies how many multiples of the baseline rhythm each line of this
// font should use up. It does not have to be an integer, but it defaults to the
// smallest integer that is large enough to fit the font.
@mixin adjust-leading-to($lines, $font-size: $base-font-size) {
  @include output-rhythm(line-height, rhythm($lines, $font-size));
}

// Apply leading whitespace. The $property can be margin or padding.
@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-top, rhythm($lines, $font-size));
}

// Apply leading whitespace as padding.
@mixin padding-leader($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(padding-top, rhythm($lines, $font-size));
}

// Apply leading whitespace as margin.
@mixin margin-leader($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(margin-top, rhythm($lines, $font-size));
}

// Apply trailing whitespace. The $property can be margin or padding.
@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-bottom, rhythm($lines, $font-size));
}

// Apply trailing whitespace as padding.
@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(padding-bottom, rhythm($lines, $font-size));
}

// Apply trailing whitespace as margin.
@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(margin-bottom, rhythm($lines, $font-size));
}

// Shorthand mixin to apply whitespace for top and bottom margins and padding.
@mixin rhythm(
  $leader: 1,
  $padding-leader: 0,
  $padding-trailer: $padding-leader,
  $trailer: $leader,
  $font-size: $base-font-size
) {
  @include leader($leader, $font-size);
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
  @include trailer($trailer, $font-size);
}

// Shorthand mixin to apply whitespace for top and bottom margins.
@mixin rhythm-margins(
  $leader: 1,
  $trailer: $leader,
  $font-size: $base-font-size
) {
  @include leader($leader, $font-size);
  @include trailer($trailer, $font-size);
}

// Shorthand mixin to apply whitespace for top and bottom padding.
@mixin rhythm-padding(
  $padding-leader: 1,
  $padding-trailer: $padding-leader,
  $font-size: $base-font-size
) {
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
}

// Apply a border and whitespace to any side without destroying the vertical
// rhythm. The whitespace must be greater than the width of the border.
@mixin apply-side-rhythm-border(
  $side,
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  // If applying borders to all sides, use shorthand properties
  $border-prop: if($side == all, border, border-#{$side});
  @include output-rhythm(#{$border-prop}-width, convert-length($width, $rhythm-unit, $font-size));
  #{$border-prop}-style: nth($border-style, 1);
  @if type-of($border-style) == list and length($border-style) > 1 {
    #{$border-prop}-color: nth($border-style, 2);
  }
  $padding-prop: if($side == all, padding, padding-#{$side});
  @include output-rhythm(#{$padding-prop}, rhythm($lines, $font-size, $offset: $width));
}

// Apply a leading border.
// $border-style and $width are deprecated and will be removed in a future version of Compass.
@mixin leading-border(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);
}

// Apply a trailing border.
@mixin trailing-border(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);
}

// Apply both leading and trailing borders.
@mixin horizontal-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include leading-border($width, $lines, $font-size, $border-style);
  @include trailing-border($width, $lines, $font-size, $border-style);
}

// Alias for `horizontal-borders` mixin.
@mixin h-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include horizontal-borders($width, $lines, $font-size, $border-style);
}

// Apply borders and whitespace equally to all sides.
@mixin rhythm-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(all, $width, $lines, $font-size, $border-style);
}
:@has_childrenT:@options{ :@children[No:Sass::Tree::ImportNode:@imported_file0:@imported_filename"#compass/layout/grid-background;0;@;	[ :
@lineio;
;0;"compass/typography/units;0;@;	[ ;io:Sass::Tree::CommentNode
:
@type:silent:@value["7/* The default font size for all text in pixels */;@;	[ ;i	o:Sass::Tree::VariableNode:@guarded"!default:
@name"base-font-size:
@expro:Sass::Script::Number:@numerator_units["px:@original"	16px;i;@:@denominator_units[ ;i
;@;	[ ;i
o;
;;;["K/* The distance between text baselines (vertical rhythm) in pixels. */;@;	[ ;io;;"!default;"base-line-height;o;;["px;"	24px;i;@;[ ;i;@;	[ ;io;
;;;["Ú/* The length unit in which to output rhythm values.
 * Supported values: px, em, rem. Percent units can't be used since they
 * make calculating padding and margins impractical, and percentage borders are
 * not valid or supported in css. */;@;	[ ;io;;"!default;"rhythm-unit;o:Sass::Script::String	;:string;"em;@;i;@;	[ ;io;
;;;["U/* Whether to output fallback values in px when using rem as the rhythm-unit. */;@;	[ ;io;;"!default;"rem-with-px-fallback;o:Sass::Script::Bool;T;@;i;@;	[ ;io;
;;;["Ñ/* Default values for rhythm borders properties.
 * Supports style alone eg. `solid` or list of style and color eg. `solid #aaa`; */;@;	[ ;io;;"!default;" default-rhythm-border-width;o;;["px;"1px;i;@;[ ;i;@;	[ ;io;;"!default;" default-rhythm-border-style;o;	;:identifier;"
solid;@;i;@;	[ ;io;
;;;["‰/* Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function
 * to round the line height to the nearest half line height instead of the
 * nearest integral line height to avoid large spacing between lines. */;@;	[ ;io;;"!default;"round-to-nearest-half-line;o;;F;@;i ;@;	[ ;i o;
;;;["e/* Ensure there is at least this many pixels
 * of vertical padding above and below the text. */;@;	[ ;i"o;;"!default;"min-line-padding;o;;["px;"2px;i;@;[ ;i$;@;	[ ;i$o;
;;;["h/* The leader is the amount of whitespace in a line.
 * It might be useful in your calculations. */;@;	[ ;i&o;;0;"base-leader;o:Sass::Script::Funcall;"convert-length:@keywords{ ;@:@splat0;i(:
@args[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	;"base-font-size:@underscored_name"base_font_size;@;i(:@operand1o;$	;"base-line-height;%"base_line_height;@;i(;@:@operator:
minus;i(o;$	;"rhythm-unit;%"rhythm_unit;@;i(o;$	;"base-font-size;%"base_font_size;@;i(;@;	[ ;i(o;
;;;["z/* The half-leader is the amount of whitespace above and below a line.
 * It might be useful in your calculations. */;@;	[ ;i*o;;0;"base-half-leader;o;"
;#o;;[ ;"2;i;@;[ ;i,;&o;$	;"base-leader;%"base_leader;@;i,;@;':div;i,;@;	[ ;i,o;
;;;["X/* @private Whether the rhythm output is in absolute units (px) or not (em, rem) */;@;	[ ;i.o;;0;"relative-font-sizing;o;;"if;{ ;@; 0;i/;![o;"
;#o;	;;;"px;@;i/;&o;$	;"rhythm-unit;%"rhythm_unit;@;i/;@;':eq;i/o;;F;@;i/o;;T;@;i/;@;	[ ;i/o;
;;;["/* Validate units */;@;	[ ;i1u:Sass::Tree::IfNode±[o:Sass::Script::Operation
:@operand2o:Sass::Script::String	:
@type:string:@value"px:@options{ :
@linei2:@operand1o:Sass::Script::Funcall:
@name"	unit:@keywords{ ;@	:@splat0;i2:
@args[o:Sass::Script::Variable	;"base-font-size:@underscored_name"base_font_size;@	;i2;@	:@operator:neq;i20[o:Sass::Tree::WarnNode	:
@expro;	;;	;
"2$base-font-size must resolve to a pixel unit.;@	;i2;@	:@children[ ;i2u;+∑[o:Sass::Script::Operation
:@operand2o:Sass::Script::String	:
@type:string:@value"px:@options{ :
@linei3:@operand1o:Sass::Script::Funcall:
@name"	unit:@keywords{ ;@	:@splat0;i3:
@args[o:Sass::Script::Variable	;"base-line-height:@underscored_name"base_line_height;@	;i3;@	:@operator:neq;i30[o:Sass::Tree::WarnNode	:
@expro;	;;	;
"4$base-line-height must resolve to a pixel unit.;@	;i3;@	:@children[ ;i3u;+3[o:Sass::Script::Operation
:@operand2o; 
;o:Sass::Script::String	:
@type:string:@value"rem:@options{ :
@linei4:@operand1o:Sass::Script::Variable	:
@name"rhythm-unit:@underscored_name"rhythm_unit;@
;i4;@
:@operator:neq;i4;o; 
;o; 
;o;	;;	;
"em;@
;i4;o;	;"rhythm-unit;"rhythm_unit;@
;i4;@
;;;i4;o; 
;o;	;;	;
"px;@
;i4;o;	;"rhythm-unit;"rhythm_unit;@
;i4;@
;;;i4;@
;:and;i4;@
;;;i40[o:Sass::Tree::WarnNode	:
@expro;	;;	;
".$rhythm-unit must be `px`, `em` or `rem`.;@
;i5;@
:@children[ ;i5o;
;;;[""/* Calculate rhythm units. */;@;	[ ;i9o:Sass::Tree::FunctionNode;"rhythm;T;@;	[o;;0;"rhythm;o;;"convert-length;{ ;@; 0;i;;![o;"
;#o;$	;"offset;%"offset;@;i;;&o;"
;#o;$	;"base-line-height;%"base_line_height;@;i;;&o;$	;"
lines;%"
lines;@;i;;@;':
times;i;;@;';(;i;o;$	;"rhythm-unit;%"rhythm_unit;@;i;o;$	;"font-size;%"font_size;@;i;;@;	[ ;i;u;+º[o:Sass::Script::Operation
:@operand2o:Sass::Script::String	:
@type:identifier:@value"px:@options{ :
@linei<:@operand1o:Sass::Script::Funcall:
@name"	unit:@keywords{ ;@	:@splat0;i<:
@args[o:Sass::Script::Variable	;"rhythm:@underscored_name"rhythm;@	;i<;@	:@operator:eq;i<0[o:Sass::Tree::VariableNode:@guarded0;"rhythm:
@expro;;"
floor;{ ;@	;0;i=;[o;	;"rhythm;"rhythm;@	;i=;@	:@children[ ;i=o:Sass::Tree::ReturnNode	;o;$	;"rhythm;%"rhythm;@;i?;@;	[ ;i?; 0;i:;![[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i:[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i:[o;$;"offset;%"offset;@o;;[ ;"0;i ;@;@Ç;i:o;
;;;["Z/* Calculate the minimum multiple of rhythm units needed to contain the font-size. */;@;	[ ;iBo;,;"lines-for-font-size;T;@;	[	o;;0;"
lines;o;;"if;{ ;@; 0;iF;![o;$	;"round-to-nearest-half-line;%"round_to_nearest_half_line;@;iDo;"
;#o;;[ ;"2;i;@;@Ç;iE;&o;;"	ceil;{ ;@; 0;iE;![o;"
;#o;$	;"base-line-height;%"base_line_height;@;iE;&o;"
;#o;$	;"font-size;%"font_size;@;iE;&o;;[ ;"2;i;@;@Ç;iE;@;';-;iE;@;';);iE;@;';);iEo;;"	ceil;{ ;@; 0;iF;![o;"
;#o;$	;"base-line-height;%"base_line_height;@;iF;&o;$	;"font-size;%"font_size;@;iF;@;';);iF;@;	[ ;iFo;
;;;["8/* If lines are cramped include some extra lead. */;@;	[ ;iGu;++[o:Sass::Script::Operation
:@operand2o; 
;o:Sass::Script::Number:@numerator_units[ :@original"2:@valuei:@options{ :@denominator_units[ :
@lineiH:@operand1o:Sass::Script::Variable	:
@name"min-line-padding:@underscored_name"min_line_padding;@;iH;@:@operator:
times;iH;o; 
;o;	;"font-size;"font_size;@;iH;o; 
;o;	;"base-line-height;"base_line_height;@;iH;o;	;"
lines;"
lines;@;iH;@;;;iH;@;:
minus;iH;@;:lt;iH0[o:Sass::Tree::VariableNode:@guarded0;"
lines:
@expro; 
;o:Sass::Script::Funcall;"if:@keywords{ ;@:@splat0;iI:
@args[o;	;"round-to-nearest-half-line;"round_to_nearest_half_line;@;iIo;;[ ;	"0.5;
f0.5;@;@;iIo;;[ ;	"1;
i;@;@;iI;o;	;"
lines;"
lines;@;iI;@;:	plus;iI;@:@children[ ;iIo;.	;o;$	;"
lines;%"
lines;@;iK;@;	[ ;iK; 0;iC;![[o;$;"font-size;%"font_size;@0o;
;;;["`/* @private Outputs rhythm values. For rem units, outputs pixel fallbacks
 * by default. */;@;	[ ;iOo:Sass::Tree::MixinDefNode;"output-rhythm;T;@;	[u;+_[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@name"rem-with-px-fallback:@underscored_name"rem_with_px_fallback:@options{ :
@lineiR:@operand1o; 
;o:Sass::Script::String	:
@type:identifier:@value"rem;
@
;iR;o;	;"rhythm-unit;	"rhythm_unit;
@
;iR;
@
:@operator:eq;iR;
@
;:and;iRu:Sass::Tree::IfNodek[00[o:Sass::Tree::VariableNode:@guarded0:
@name"output:
@expro:Sass::Script::List	:@separator:
space:@value[ :@options{ :
@lineiV;@:@children[ ;iVo:Sass::Tree::EachNode:@has_childrenT;@:	@var"
value;[u:Sass::Tree::IfNodeò[o:Sass::Script::Operation
:@operand2o:Sass::Script::String	:
@type:identifier:@value"px:@options{ :
@lineiX:@operand1o:Sass::Script::Funcall:
@name"	unit:@keywords{ ;@	:@splat0;iX:
@args[o:Sass::Script::Variable	;"
value:@underscored_name"
value;@	;iX;@	:@operator:eq;iXu:Sass::Tree::IfNode[00[o:Sass::Tree::VariableNode:@guarded0:
@name"output:
@expro:Sass::Script::Funcall;"	join:@keywords{ :@options{ :@splat0:
@linei]:
@args[o:Sass::Script::Variable	;"output:@underscored_name"output;@;i]o;	;"
value;"
value;@;i];@:@children[ ;i][o:Sass::Tree::CommentNode
;:silent;
["D/* Ensure all pixel values are rounded to the nearest pixel. */;@	:@children[ ;iYo:Sass::Tree::VariableNode:@guarded0;"output:
@expro;;"	join;{ ;@	;0;iZ;[o;	;"output;"output;@	;iZo;;"
round;{ ;@	;0;iZ;[o;	;"
value;"
value;@	;iZ;@	;[ ;iZ;iW:
@listo:Sass::Script::Variable	;"values:@underscored_name"values;@;iWo:Sass::Tree::PropNode;[o;	;"property;"property;@;i`;o;	;"output;"output;@;i`:@prop_syntax:new;@:
@tabsi ;[ ;i`[o:Sass::Tree::MixinNode;"rem:@keywords{ ;
@
:@children[ :@splat0;iS:
@args[o;	;"property;	"property;
@
;iSo;	;"values;	"values;
@
;iS; 0;iQ;![[o;$;"property;%"property;@0[o;$;"values;%"values;@0o;
;;;["?/* Establishes a font baseline for the given font-size. */;@;	[ ;ido;/;"establish-baseline;T;@;	[o;;0;"relative-size;o;"
;#o;"
;#o;$	;"browser-default-font-size;%"browser_default_font_size;@;if;&o;$	;"font-size;%"font_size;@;if;@;';);if;&o;;["%;"	100%;ii;@;[ ;if;@;';-;if;@;	[ ;ifu;+s[o:Sass::Script::Operation
:@operand2o:!Sass::Script::UnaryOperation	:@options{ :@operator:not:@operando:Sass::Script::Variable	:
@name"relative-font-sizing:@underscored_name"relative_font_sizing;@:
@lineih;ih:@operand1o;	;"legacy-support-for-ie6;"legacy_support_for_ie6;@;ih;@;	:and;ih0[o:Sass::Tree::CommentNode
:
@type:silent:@value["‚/* IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts
 * whose root is set in ems. So we set the root font size in percentages of
 * the default font size, even if we are using absolute sizes elsewhere. */;@:@children[ ;iio:Sass::Tree::RuleNode:
@rule["* html:@parsed_ruleso:"Sass::Selector::CommaSequence:@filename" ;il:@members[o:Sass::Selector::Sequence;[o:#Sass::Selector::SimpleSequence
:@sourceso:Set:
@hash{ :@subject0;@;il;[o:Sass::Selector::Universal;@:@namespace0;ilo;
;o; ;!{ ;"0;@;il;[o:Sass::Selector::Element	;["	html;@;$0;il:@has_childrenT;@:
@tabsi ;[o:Sass::Tree::PropNode;["font-size;o;	;"relative-size;"relative_size;@;il:@prop_syntax:new;@;'i ;[ ;il;ilo:Sass::Tree::RuleNode:
@rule["	html:@parsed_ruleso:"Sass::Selector::CommaSequence:@filename" ;in:@members[o:Sass::Selector::Sequence;5[o:#Sass::Selector::SimpleSequence
:@sourceso:Set:
@hash{ :@subject0;4@G;in;5[o:Sass::Selector::Element	;["	html;4@G:@namespace0;in;T;@:
@tabsi ;	[o:Sass::Tree::PropNode;["font-size;o;;"if;{ ;@; 0;io;![o;$	;"relative-font-sizing;%"relative_font_sizing;@;ioo;$	;"relative-size;%"relative_size;@;ioo;$	;"font-size;%"font_size;@;io:@prop_syntax:new;@;>i ;	[ ;ioo;
;;;["·/* Webkit has a bug that prevents line-height being set in rem on <html>;
 * To work around this and simplify output, we can set initial line-height
 * in ems for all relative rhythm units, even when $rhythm-unit is `rem`. */;@;	[ ;iqu;+‘[o:Sass::Script::Variable	:
@name"relative-font-sizing:@underscored_name"relative_font_sizing:@options{ :
@lineitu:Sass::Tree::IfNode [00[o:Sass::Tree::PropNode:
@name["line-height:@valueo:Sass::Script::Funcall;"
round:@keywords{ :@options{ :@splat0:
@lineix:
@args[o:Sass::Script::Variable	;"base-line-height:@underscored_name"base_line_height;
@;ix:@prop_syntax:new;
@:
@tabsi :@children[ ;ix[o:Sass::Tree::PropNode;["line-height:@valueo:Sass::Script::Funcall;"convert-length:@keywords{ ;@	:@splat0;	iu:
@args[o; 	;"base-line-height;"base_line_height;@	;	iuo:Sass::Script::String	:
@type:identifier;"em;@	;	iu:@prop_syntax:new;@	:
@tabsi :@children[ ;	iu;in; 0;ie;![[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;ieo;
;;;["Í/* Resets the baseline to 1 rhythm unit
 * Does not work on elements whose font-size is different from $base-font-size.
 *
 * @deprecated This mixin will be removed in the next release.
 * Please use `adjust-leading-to(1)` instead. */;@;	[ ;i}o;/;"reset-baseline;T;@;	[o:Sass::Tree::MixinNode;"adjust-leading-to;{ ;@;	[ ; 0;i~;![o;;[ ;"1;i;@;@Ç;i~o;$	;"font-size;%"font_size;@;i~; 0;i};![[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i}o;
;;;["/* Show a background image that can be used to debug your alignments.
 * As this is a development feature, this mixin never outputs pixel fallbacks
 * for rem output.
 * Include the $img argument if you would rather use your own image than the
 * Compass default gradient image. */;@;	[ ;iÅo;/;"debug-vertical-alignment;T;@;	[u;+˜[o:Sass::Script::Variable	:
@name"img:@underscored_name"img:@options{ :
@lineiáu:Sass::Tree::IfNodeª[00[o:Sass::Tree::MixinNode:
@name"baseline-grid-background:@keywords{ :@options{ :@children[ :@splat0:
@lineiã:
@args[o:Sass::Script::Funcall;"rhythm;{ ;@
;
0;iã;[ [o:Sass::Tree::PropNode;["background:@valueo:Sass::Script::Funcall;"image-url:@keywords{ ;@	:@splat0;	ià:
@args[o; 	;"img;"img;@	;	ià:@prop_syntax:new;@	:
@tabsi :@children[ ;	ià; 0;iÜ;![[o;$;"img;%"img;@o;;F;@;iÜo;
;;;["Å/* Adjust a block to have a different font size and line height to maintain the
 * rhythm. $lines specifies how many multiples of the baseline rhythm each line
 * of this font should use up. It does not have to be an integer, but it
 * defaults to the smallest integer that is large enough to fit the font.
 * Use $from-size to adjust from a font-size other than the base font-size. */;@;	[ ;ièo;/;"adjust-font-size-to;T;@;	[	o;;0;"to-size;o;;"convert-length;{ ;@; 0;iï;![o;$	;"to-size;%"to_size;@;iïo;	;;;"px;@;iïo;$	;"from-size;%"from_size;@;iï;@;	[ ;iïu;+≤[o:Sass::Script::Operation
:@operand2o:Sass::Script::String	:
@type:identifier:@value"	auto:@options{ :
@lineiñ:@operand1o:Sass::Script::Variable	:
@name"
lines:@underscored_name"
lines;@	;iñ;@	:@operator:eq;iñ0[o:Sass::Tree::VariableNode:@guarded0;"
lines:
@expro:Sass::Script::Funcall;"lines-for-font-size:@keywords{ ;@	:@splat0;ió:
@args[o;	;"to-size;"to_size;@	;ió;@	:@children[ ;ióo;B;"output-rhythm;{ ;@;	[ ; 0;iô;![o;	;;;"font-size;@;iôo;;"convert-length;{ ;@; 0;iô;![o;$	;"to-size;%"to_size;@;iôo;$	;"rhythm-unit;%"rhythm_unit;@;iôo;$	;"from-size;%"from_size;@;iôo;B;"adjust-leading-to;{ ;@;	[ ; 0;iö;![o;$	;"
lines;%"
lines;@;iöo;$	;"to-size;%"to_size;@;iö; 0;iî;![[o;$;"to-size;%"to_size;@0[o;$;"
lines;%"
lines;@o;	;;;"	auto;@;iî[o;$;"from-size;%"from_size;@o;$	;"base-font-size;%"base_font_size;@;iîo;
;;;["%/* Adjust a block to have different line height to maintain the rhythm.
 * $lines specifies how many multiples of the baseline rhythm each line of this
 * font should use up. It does not have to be an integer, but it defaults to the
 * smallest integer that is large enough to fit the font. */;@;	[ ;iùo;/;"adjust-leading-to;T;@;	[o;B;"output-rhythm;{ ;@;	[ ; 0;i¢;![o;	;;;"line-height;@;i¢o;;"rhythm;{ ;@; 0;i¢;![o;$	;"
lines;%"
lines;@;i¢o;$	;"font-size;%"font_size;@;i¢; 0;i°;![[o;$;"
lines;%"
lines;@0[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i°o;
;;;["L/* Apply leading whitespace. The $property can be margin or padding. */;@;	[ ;i•o;/;"leader;T;@;	[o;B;"output-rhythm;{ ;@;	[ ; 0;iß;![o: Sass::Script::Interpolation:@aftero;	;;;"	-top;@;iß:@originally_textF:	@mido;$	;"property;%"property;@;iß:@whitespace_after0;@:@before0;iß:@whitespace_before0o;;"rhythm;{ ;@; 0;iß;![o;$	;"
lines;%"
lines;@;ißo;$	;"font-size;%"font_size;@;iß; 0;i¶;![[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i¶[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i¶[o;$;"property;%"property;@o;	;;;"margin;@;i¶o;
;;;["//* Apply leading whitespace as padding. */;@;	[ ;i™o;/;"padding-leader;T;@;	[o;B;"output-rhythm;{ ;@;	[ ; 0;i¨;![o;	;;;"padding-top;@;i¨o;;"rhythm;{ ;@; 0;i¨;![o;$	;"
lines;%"
lines;@;i¨o;$	;"font-size;%"font_size;@;i¨; 0;i´;![[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i´[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i´o;
;;;["./* Apply leading whitespace as margin. */;@;	[ ;iØo;/;"margin-leader;T;@;	[o;B;"output-rhythm;{ ;@;	[ ; 0;i±;![o;	;;;"margin-top;@;i±o;;"rhythm;{ ;@; 0;i±;![o;$	;"
lines;%"
lines;@;i±o;$	;"font-size;%"font_size;@;i±; 0;i∞;![[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i∞[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i∞o;
;;;["M/* Apply trailing whitespace. The $property can be margin or padding. */;@;	[ ;i¥o;/;"trailer;T;@;	[o;B;"output-rhythm;{ ;@;	[ ; 0;i∂;![o;C;Do;	;;;"-bottom;@;i∂;EF;Fo;$	;"property;%"property;@;i∂;G0;@;H0;i∂;I0o;;"rhythm;{ ;@; 0;i∂;![o;$	;"
lines;%"
lines;@;i∂o;$	;"font-size;%"font_size;@;i∂; 0;iµ;![[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;iµ[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;iµ[o;$;"property;%"property;@o;	;;;"margin;@;iµo;
;;;["0/* Apply trailing whitespace as padding. */;@;	[ ;iπo;/;"padding-trailer;T;@;	[o;B;"output-rhythm;{ ;@;	[ ; 0;iª;![o;	;;;"padding-bottom;@;iªo;;"rhythm;{ ;@; 0;iª;![o;$	;"
lines;%"
lines;@;iªo;$	;"font-size;%"font_size;@;iª; 0;i∫;![[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i∫[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i∫o;
;;;["//* Apply trailing whitespace as margin. */;@;	[ ;iæo;/;"margin-trailer;T;@;	[o;B;"output-rhythm;{ ;@;	[ ; 0;i¿;![o;	;;;"margin-bottom;@;i¿o;;"rhythm;{ ;@; 0;i¿;![o;$	;"
lines;%"
lines;@;i¿o;$	;"font-size;%"font_size;@;i¿; 0;iø;![[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;iø[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;iøo;
;;;["V/* Shorthand mixin to apply whitespace for top and bottom margins and padding. */;@;	[ ;i√o;/;"rhythm;T;@;	[	o;B;"leader;{ ;@;	[ ; 0;iÀ;![o;$	;"leader;%"leader;@;iÀo;$	;"font-size;%"font_size;@;iÀo;B;"padding-leader;{ ;@;	[ ; 0;iÃ;![o;$	;"padding-leader;%"padding_leader;@;iÃo;$	;"font-size;%"font_size;@;iÃo;B;"padding-trailer;{ ;@;	[ ; 0;iÕ;![o;$	;"padding-trailer;%"padding_trailer;@;iÕo;$	;"font-size;%"font_size;@;iÕo;B;"trailer;{ ;@;	[ ; 0;iŒ;![o;$	;"trailer;%"trailer;@;iŒo;$	;"font-size;%"font_size;@;iŒ; 0;i ;![
[o;$;"leader;%"leader;@o;;[ ;"1;i;@;@Ç;i≈[o;$;"padding-leader;%"padding_leader;@o;;[ ;"0;i ;@;@Ç;i∆[o;$;"padding-trailer;%"padding_trailer;@o;$	;"padding-leader;%"padding_leader;@;i«[o;$;"trailer;%"trailer;@o;$	;"leader;%"leader;@;i»[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i…o;
;;;["J/* Shorthand mixin to apply whitespace for top and bottom margins. */;@;	[ ;i—o;/;"rhythm-margins;T;@;	[o;B;"leader;{ ;@;	[ ; 0;i◊;![o;$	;"leader;%"leader;@;i◊o;$	;"font-size;%"font_size;@;i◊o;B;"trailer;{ ;@;	[ ; 0;iÿ;![o;$	;"trailer;%"trailer;@;iÿo;$	;"font-size;%"font_size;@;iÿ; 0;i÷;![[o;$;"leader;%"leader;@o;;[ ;"1;i;@;@Ç;i”[o;$;"trailer;%"trailer;@o;$	;"leader;%"leader;@;i‘[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i’o;
;;;["J/* Shorthand mixin to apply whitespace for top and bottom padding. */;@;	[ ;i€o;/;"rhythm-padding;T;@;	[o;B;"padding-leader;{ ;@;	[ ; 0;i·;![o;$	;"padding-leader;%"padding_leader;@;i·o;$	;"font-size;%"font_size;@;i·o;B;"padding-trailer;{ ;@;	[ ; 0;i‚;![o;$	;"padding-trailer;%"padding_trailer;@;i‚o;$	;"font-size;%"font_size;@;i‚; 0;i‡;![[o;$;"padding-leader;%"padding_leader;@o;;[ ;"1;i;@;@Ç;i›[o;$;"padding-trailer;%"padding_trailer;@o;$	;"padding-leader;%"padding_leader;@;iﬁ[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;iﬂo;
;;;["ó/* Apply a border and whitespace to any side without destroying the vertical
 * rhythm. The whitespace must be greater than the width of the border. */;@;	[ ;iÂo;/;"apply-side-rhythm-border;T;@;	[o;
;;;["E/* If applying borders to all sides, use shorthand properties */;@;	[ ;iÓo;;0;"border-prop;o;;"if;{ ;@; 0;iÔ;![o;"
;#o;	;;;"all;@;iÔ;&o;$	;"	side;%"	side;@;iÔ;@;';*;iÔo;	;;;"border;@;iÔo;C;D0;EF;Fo;$	;"	side;%"	side;@;iÔ;G0;@;Ho;	;;;"border-;@;iÔ;iÔ;I0;@;	[ ;iÔo;B;"output-rhythm;{ ;@;	[ ; 0;i;![o;C;Do;	;;;"-width;@;i;EF;Fo;$	;"border-prop;%"border_prop;@;i;G0;@;H0;i;I0o;;"convert-length;{ ;@; 0;i;![o;$	;"
width;%"
width;@;io;$	;"rhythm-unit;%"rhythm_unit;@;io;$	;"font-size;%"font_size;@;io;?;[o;$	;"border-prop;%"border_prop;@;iÒ"-style;o;;"nth;{ ;@; 0;iÒ;![o;$	;"border-style;%"border_style;@;iÒo;;[ ;"1;i;@;@Ç;iÒ;@;A;@;>i ;	[ ;iÒu;+[o:Sass::Script::Operation
:@operand2o; 
;o:Sass::Script::Number:@numerator_units[ :@original"1:@valuei:@options{ :@denominator_units[ :
@lineiÚ:@operand1o:Sass::Script::Funcall:
@name"length:@keywords{ ;@:@splat0;iÚ:
@args[o:Sass::Script::Variable	;"border-style:@underscored_name"border_style;@;iÚ;@:@operator:gt;iÚ;o; 
;o:Sass::Script::String	:
@type:identifier;
"	list;@;iÚ;o;;"type-of;{ ;@;0;iÚ;[o;	;"border-style;"border_style;@;iÚ;@;:eq;iÚ;@;:and;iÚ0[o:Sass::Tree::PropNode;[o;	;"border-prop;"border_prop;@;iÛ"-color;
o;;"nth;{ ;@;0;iÛ;[o;	;"border-style;"border_style;@;iÛo;;[ ;	"2;
i;@;@;iÛ:@prop_syntax:new;@:
@tabsi :@children[ ;iÛo;;0;"padding-prop;o;;"if;{ ;@; 0;iı;![o;"
;#o;	;;;"all;@;iı;&o;$	;"	side;%"	side;@;iı;@;';*;iıo;	;;;"padding;@;iıo;C;D0;EF;Fo;$	;"	side;%"	side;@;iı;G0;@;Ho;	;;;"padding-;@;iı;iı;I0;@;	[ ;iıo;B;"output-rhythm;{ ;@;	[ ; 0;iˆ;![o;C;D0;EF;Fo;$	;"padding-prop;%"padding_prop;@;iˆ;G0;@;H0;iˆ;I0o;;"rhythm;{"offseto;$	;"
width;%"
width;@;iˆ;@; 0;iˆ;![o;$	;"
lines;%"
lines;@;iˆo;$	;"font-size;%"font_size;@;iˆ; 0;iÌ;![
[o;$;"	side;%"	side;@0[o;$;"
width;%"
width;@o;$	;" default-rhythm-border-width;%" default_rhythm_border_width;@;iÈ[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;iÍ[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;iÎ[o;$;"border-style;%"border_style;@o;$	;" default-rhythm-border-style;%" default_rhythm_border_style;@;iÏo;
;;;["|/* Apply a leading border.
 * $border-style and $width are deprecated and will be removed in a future version of Compass. */;@;	[ ;i˘o;/;"leading-border;T;@;	[o;B;"apply-side-rhythm-border;{ ;@;	[ ; 0;i;![
o;	;;;"top;@;io;$	;"
width;%"
width;@;io;$	;"
lines;%"
lines;@;io;$	;"font-size;%"font_size;@;io;$	;"border-style;%"border_style;@;i; 0;i ;![	[o;$;"
width;%"
width;@o;$	;" default-rhythm-border-width;%" default_rhythm_border_width;@;i¸[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i˝[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i˛[o;$;"border-style;%"border_style;@o;$	;" default-rhythm-border-style;%" default_rhythm_border_style;@;iˇo;
;;;["#/* Apply a trailing border. */;@;	[ ;io;/;"trailing-border;T;@;	[o;B;"apply-side-rhythm-border;{ ;@;	[ ; 0;i;![
o;	;;;"bottom;@;io;$	;"
width;%"
width;@;io;$	;"
lines;%"
lines;@;io;$	;"font-size;%"font_size;@;io;$	;"border-style;%"border_style;@;i; 0;i
;![	[o;$;"
width;%"
width;@o;$	;" default-rhythm-border-width;%" default_rhythm_border_width;@;i[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i[o;$;"border-style;%"border_style;@o;$	;" default-rhythm-border-style;%" default_rhythm_border_style;@;i	o;
;;;["3/* Apply both leading and trailing borders. */;@;	[ ;io;/;"horizontal-borders;T;@;	[o;B;"leading-border;{ ;@;	[ ; 0;i;![	o;$	;"
width;%"
width;@;io;$	;"
lines;%"
lines;@;io;$	;"font-size;%"font_size;@;io;$	;"border-style;%"border_style;@;io;B;"trailing-border;{ ;@;	[ ; 0;i;![	o;$	;"
width;%"
width;@;io;$	;"
lines;%"
lines;@;io;$	;"font-size;%"font_size;@;io;$	;"border-style;%"border_style;@;i; 0;i;![	[o;$;"
width;%"
width;@o;$	;" default-rhythm-border-width;%" default_rhythm_border_width;@;i[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i[o;$;"border-style;%"border_style;@o;$	;" default-rhythm-border-style;%" default_rhythm_border_style;@;io;
;;;["0/* Alias for `horizontal-borders` mixin. */;@;	[ ;io;/;"h-borders;T;@;	[o;B;"horizontal-borders;{ ;@;	[ ; 0;i ;![	o;$	;"
width;%"
width;@;i o;$	;"
lines;%"
lines;@;i o;$	;"font-size;%"font_size;@;i o;$	;"border-style;%"border_style;@;i ; 0;i;![	[o;$;"
width;%"
width;@o;$	;" default-rhythm-border-width;%" default_rhythm_border_width;@;i[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i[o;$;"border-style;%"border_style;@o;$	;" default-rhythm-border-style;%" default_rhythm_border_style;@;io;
;;;["=/* Apply borders and whitespace equally to all sides. */;@;	[ ;i#o;/;"rhythm-borders;T;@;	[o;B;"apply-side-rhythm-border;{ ;@;	[ ; 0;i*;![
o;	;;;"all;@;i*o;$	;"
width;%"
width;@;i*o;$	;"
lines;%"
lines;@;i*o;$	;"font-size;%"font_size;@;i*o;$	;"border-style;%"border_style;@;i*; 0;i);![	[o;$;"
width;%"
width;@o;$	;" default-rhythm-border-width;%" default_rhythm_border_width;@;i%[o;$;"
lines;%"
lines;@o;;[ ;"1;i;@;@Ç;i&[o;$;"font-size;%"font_size;@o;$	;"base-font-size;%"base_font_size;@;i'[o;$;"border-style;%"border_style;@o;$	;" default-rhythm-border-style;%" default_rhythm_border_style;@;i(;i